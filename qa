#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'

class RunCommandGenerator

  def self.parse(args)
    options = OpenStruct.new
    options.processes = "1"
    options.environment = "dev"
    options.fileType = "test"
    options.dryRun = ""

    opt_parser = OptionParser.new do |opts|

      # Optional argument; multi-line description.
      opts.on("-p", "--processes [ARG]",
              "Specify processes, defaults to 1 if not specified") do |ext|
        options.processes = ext
      end

      opts.on("-e", "--environment [ARG]",
              "Specify environment, defaults to 'dev' if not specified") do |ext|
        options.environment = ext
      end

      opts.on("-t", "--type [ARG]",
              "Specify File Type, defaults to 'test' if not specified") do |ext|
        options.fileType = ext
      end
      opts.on("-d", "--dry [ARG]",
              "Pass if you want to perform dry run, just specify '-d'") do |ext|
        options.dryRun = ext
      end
    end

    opt_parser.parse!(args)
    options
  end

end



# Get User Input
options = RunCommandGenerator.parse(ARGV)

# Check if no Test Case Name is provided
if !!options.dryRun && ARGV.length == 0
  puts "Please provide Test Case Name or '-d' or '--dry' to perform Dry Run"
  exit
end

# Get Project Folder Name
folder_name = ""
vari = Dir.glob("#{ENV['HOME']}/**/*di-automation")
vari.each do|t|
  if not t.include? "iCloud Drive (Archive)"
    folder_name = t
  end
end

# Dry Run
if not !!options.dryRun
  cmd = "robot --variablefile ./Properties/dev_env_variables.py --outputdir=./output --variable remote_url: --dryrun --exclude exclude  --include RFR  --include Planner ."

else
  # Get Individual Test Case Name
  test_case_name = ""
  ARGV.each do|a|
    test_case_name = test_case_name + a + ' '
  end

  test_cases = test_case_name.split(", ")

  test_execution_command = ""
  # Run pabot command for each Test Case
  test_cases.each do |test_case_name|
    test_execution_command = test_execution_command + "--" + options.fileType + " '" + test_case_name.strip + "' "
  end

  cmd = "pabot --processes " + options.processes + " --testlevelsplit --variablefile ./Properties/" + options.environment + "_env_variables.py --variable remote_url: --outputdir=./output --exclude exclude" + " " + test_execution_command.strip + " ."
end

puts "Executing command:-\n"
puts "\e[32m#{cmd}\e[0m"

Dir.chdir(folder_name){system(cmd)}

#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'

class RunCommandGenerator

  def self.parse(args)
    options = OpenStruct.new
    options.processes = "1"
    options.environment = "dev"
    options.fileType = "test"
    options.dryRun = ""

    opt_parser = OptionParser.new do |opts|

      # Optional argument; multi-line description.
      opts.on("-p", "--processes [ARG]",
              "Specify processes, defaults to 1 if not specified") do |ext|
        options.processes = ext
      end

      opts.on("-e", "--environment [ARG]",
              "Specify environment, defaults to 'dev' if not specified") do |ext|
        options.environment = ext
      end

      opts.on("-t", "--type [ARG]",
              "Specify File Type, defaults to 'test' if not specified") do |ext|
        options.fileType = ext
      end
      opts.on("-d", "--dry [ARG]",
              "Pass if you want to perform dry run, just specify '-d'") do |ext|
        options.dryRun = ext
      end
    end

    opt_parser.parse!(args)
    options
  end

end



# Get User Input
options = RunCommandGenerator.parse(ARGV)

# Check if User Input is empty
if options && options.dryRun.nil?
  cmd = "robot --variablefile ./Properties/dev_env_variables.py --outputdir=./output --variable remote_url: --dryrun --exclude exclude  --include RFR  --include Planner ."
  
else
  # Parse Test Case Name
  test_case_name = ""
  ARGV.each do|a|
    test_case_name = test_case_name + a + ' '
  end

  # Check if user has provided Test Case Name
  begin
    if test_case_name.chop.empty?
      raise "Test Case Name empty"
    end
  rescue
    puts "Please provide Test Case Name or '-d' or '--dry' to perform Dry Run"
    exit
  end

  # Build Command to Execute Test Case
  cmd = "pabot --processes " + options.processes + " --testlevelsplit --variablefile ./Properties/" + options.environment + "_env_variables.py --variable remote_url: --outputdir=./output --exclude exclude --" + options.fileType + " '" + test_case_name.chop + "' ."
end
puts "Executing command:-\n"
puts "\e[32m#{cmd}\e[0m"

# Get Project Folder Path
folder_name = ""
vari = Dir.glob("#{ENV['HOME']}/**/*di-automation")
vari.each do|t|
  if not t.include? "iCloud Drive (Archive)"
    folder_name = t
  end
end

# Print Project Folder Name
puts "Project folder:-\n"
puts "\e[32m#{folder_name}\e[0m"

# Execute Command to run Test Case
Dir.chdir(folder_name){system(cmd)}
